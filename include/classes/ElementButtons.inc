<?php
/**
 *  labsystem.m-o-p.de -
 *                  the web based eLearning tool for practical exercises
 *  Copyright (C) 2010  Marc-Oliver Pahl
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
* This classes Methods are used to create the buttons for the control menus in the contents area.
*
*/

/**
* The methods of this class are statically called to make the buttons.
*
* @module     ../include/classes/ElementButtons.inc
* @author     Marc-Oliver Pahl
* @copyright  Marc-Oliver Pahl 2005
* @version    1.0
*/

include (INCLUDE_DIR."/classes/EmojiDBInterface.inc");

class EB{ /* ElementButtons */

  /**
  * This method is only called internally and returns the link.
  *
  * @param $link  The link to link to.
  * @param $img   The image that is used as button.
  *
  * @return       The link's html-code.
  */
  /*private*/ static function mkLink( $link, $img ){
    global $pge;
    return "\t<a tabindex=\"".$pge->nextTab++."\" href=\"".$link."\">".$img."</a>\n";
  }

  /**
  * This method is only called internally and returns a hidden div with the link in a textbox for copying.
  *
  * @param $link  The link to link to.
  * @param $img   The image that is used as button.
  *
  * @return       The link's html-code.
  */
  /*private*/ static function mkHiddenDiv( $link, $img, $content ){
    global $pge;
    return " <a tabindex=\"".$pge->nextTab++."\" href=\"".
                $link.
                "\"".
                " onMouseUp=\"if (document.getElementById('hiddenDiv_".$pge->nextTab.
                  "').style.display != 'block') document.getElementById('hiddenDiv_".$pge->nextTab.
                  "').style.display = 'block'; else document.getElementById('hiddenDiv_".$pge->nextTab.
                  "').style.display = 'none';\" onClick=\"return false;\"".
                ">".
           $img.
           "</a>".
           "<div id=\"hiddenDiv_".$pge->nextTab."\" class=\"labsys_mop_history\">\n".
           '<div style="display: inline; float: right; text-align: center; padding-right: 2px; color: #555555;">'.
           '<a href="#" onClick="document.getElementById(\'hiddenDiv_'.$pge->nextTab.'\').style.display = \'none\'; return false;">X</a>'.
           '</div>'.
            $content.
           "\n</div>"
           ;
  }

  /**
   * Returns the link URL to this element (used by the all questions page in the LlElement)
   *
   * @param $address  The element's address.
   *
   * @return          The button's html-code.
   */
  static function getLink2ElementURL( $address ){
    // When the address contains a small c the link should be ....c...#$address
    $posc = strpos($address, 'c');
    $fragment = '';
    if ($posc){
      $posDot = strpos($address, '.', $posc);
      if ($posDot != 0){
        $fragment = '#'.$address;
        $address = substr($address, 0, $posDot);
      }
    }
    return '../pages/view.php?address='.$address.'&amp;amp;&#x005F;_LINKQUERY__'.$fragment;
  }

  /**
  * This button contains the url of the given element with all necessary values for integrating it on a page.
  * So you can copy the elements address and paste it into a page element.
  *
  * @param $address  The element's address.
  *
  * @return          The button's html-code.
  */
  static function link2Element( $address, &$el=false ){
    global $lng;

    return EB::mkHiddenDiv( "../pages/view.php?address=".$address."&amp;amp;&#x005F;_LINKQUERY__",
                            "<img src=\"../syspix/button_link2_13x12.gif\" width=\"13\" height=\"12\" border=\"0\" alt=\"link to\" title=\"".$lng->get("explainLink2")."\">",
                            '<input type="text" style="width: 100%" value="&lt;a href=&quot;'.EB::getLink2ElementURL( $address ).'&quot;&gt;'.($el && ($el->title != "") ? htmlentities( htmlentities($el->title )) : 'Link to '.$address).'&lt;/a&gt;" onClick="this.select();">' );
  }

  /**
  * Creates the link button linking to the given $link-url. Adds __LINKQUERY__
  *
  * @param $link     The url..
  *
  * @return          The button's html-code.
  */
  static function link2Url( $link ){
    global $lng;
    $link .= '?&#x005F;_LINKQUERY__';
    return EB::mkHiddenDiv( $link,
                            "<img src=\"../syspix/button_link2_13x12.gif\" width=\"13\" height=\"12\" border=\"0\" alt=\"link to\" title=\"".$lng->get("explainLink2")."\">",
                            '<input type="text" style="width: 100%" value="&lt;a href=&quot;'.$link.'&quot;&gt;Text&lt;/a&gt;" onClick="this.select();">' );
  }

  /**
  * Creates the link button linking to the given $content
  *
  * @param $content  The content to be shown in the link box..
  *
  * @return          The button's html-code.
  */
  static function link2Content( $content ){
    global $lng;
    return EB::mkHiddenDiv( '#',
                              "<img src=\"../syspix/button_link2_13x12.gif\" width=\"13\" height=\"12\" border=\"0\" alt=\"link to\" title=\"".$lng->get("explainLink2")."\">",
                              '<input type="text" style="width: 100%" value="'.$content.'" onClick="this.select();">' );
  }

  /**
  * This button links to the epub of the element. It is used in l-elements.
  *
  * @param $address  The element's address.
  *
  * @return          The button's html-code.
  */
  static function link2epub( $address ){
    global $lng, $cfg;
    // Do not show the button if ePubs are not allowed.
    $allowEpub = $cfg->doesExist('allowEpubDownload') && ($cfg->get('allowEpubDownload') == "1");
    if (!$allowEpub){ return '';}

    return EB::mkLink( "../pages/view.php?address=".$address.".epub&amp;__LINKQUERY__",
                       "<img src=\"../syspix/button_epub_12x12.gif\" width=\"12\" height=\"12\" border=\"0\" alt=\"link to\" title=\"".$lng->get("explainLink2epub")."\">" );
  }

  /**
  * This button links to "view the element".
  *
  * @param $address  The element's address.
  *
  * @return          The button's html-code.
  */
  static function view( $address ){
    global $lng, $url;
    $link = $url->link2( '../pages/view.php', Array('address' => $address) ).'#'.$address; // #$address will jump directly to the element
    return EB::mkLink( $link, "<img src=\"../syspix/button_view_13x12.gif\" width=\"13\" height=\"12\" border=\"0\" alt=\"view\" title=\"".$lng->get("explainView")."\">" );
  }

  /**
  * This button links to "edit the element".
  *
  * @param $address  The element's address.
  *
  * @return          The button's html-code.
  */
  static function edit( $address ){
    global $lng, $url;
    $link = $url->link2( '../pages/edit.php', Array('address' => $address) );
    return EB::mkLink( $link, "<img src=\"../syspix/button_edit_13x12.gif\" width=\"13\" height=\"12\" border=\"0\" alt=\"edit\" title=\"".$lng->get("explainEdit")."\">" );
  }

  /**
   * This button links to "clone the element".
   *
   * @param $address  The element's address.
   *
   * @return          The button's html-code.
   */
  static function cloneMe( $address ){
  	global $lng, $url;
  	$link = $url->link2( '../php/clone.php', Array('address' => $address) );
  	return EB::mkLink( $link, '<img src="../syspix/button_clone_32x12.gif" width="32" height="12" alt="clone" title="'.$lng->get('cloneThisElement').'">' );
  }

  /**
  * This button links to "print view (all on one)".
  *
  * @param $address  The element's address.
  *
  * @return          The button's html-code.
  */
  static function printView( $address ){
    global $lng, $url;
    $link = $url->link2( '../pages/view.php', Array('address' => $address) );
    return EB::mkLink( $link, "<img src=\"../syspix/button_folder_open_13x12.gif\" width=\"13\" height=\"12\" border=\"0\" alt=\"view\" title=\"".$lng->get("explainPrintView")."\">" );
  }

  /**
  * This button links to "create a new element of this type".
  *
  * @param $elementID The ID of the element that should get created (p.e. "p").
  *
  * @return           The button's html-code.
  */
  static function createNew( $elementID ){
    global $lng, $url;
    $link = $url->link2( '../pages/edit.php', Array('address' => $elementID.'1', 'saveAsNew' => 'true') );
    return EB::mkLink( $link, "<img src=\"../syspix/button_new_13x12.gif\" width=\"13\" height=\"12\" border=\"0\" alt=\"new\" title=\"".$lng->get("explainCreateNew")."\">" );
  }

  /**
  * This button links to the elements' manage page.
  *
  * @return          The button's html-code.
  */
  static function manageElements( ){
    global $lng, $url;
    return EB::mkLink( $url->link2('../pages/view.php', Array('address' => 'p2') ), "<img src=\"../syspix/button_manage_elements_13x12.gif\" width=\"13\" height=\"12\" border=\"0\" alt=\"new\" title=\"".$lng->get("explainManageElmnts")."\">" );
  }

  /**
  * This button links to "delete the element".
  *
  * @param $address  The element's address.
  *
  * @return          The button's html-code.
  */
  static function delete( $address ){
    global $lng, $pge, $url;
    $link = $url->link2( '../php/delete.php', Array('address' => $address) );
    return "<a tabindex=\"".$pge->nextTab++."\" href=\"".$link."\" onClick=\"return confirmLink(this, '".$address.": ".$lng->get("confirmDelete")."');\">".
           "<img src=\"../syspix/button_delete_13x12.gif\" width=\"13\" height=\"12\" border=\"0\" alt=\"delete\" title=\"".$lng->get("explainDeleteElemnt")."\">".
           "</a>";
  }

  /**
  * This button links to the collection's "view structure".
  *
  * @param $address  The element's address.
  *
  * @return          The button's html-code.
  */
  static function viewStructure( $address ){
    global $lng, $url;
    $link = $url->link2( '../pages/view.php', Array('address' => $address.'.structure') );
    return EB::mkLink( $link, "<img src=\"../syspix/button_view_structure_13x12.gif\" width=\"13\" height=\"12\" border=\"0\" alt=\"view_structure\" title=\"".$lng->get("explainViewStructure")."\">" );
  }

  /**
  * This button links to the element's history (normally via hidden layer by mouseclick).
  *
  * If !$url->available( 'fullHistory' ) the history is shortened to $cfg->get( 'limitHistLns2' )
  * and a Link thisURL&fullHistory=$address is provided if something was cut.
  *
  * @param $history         HTML-Code of the history.
  *                         Used for the popUp and $sendAsAddHist.
  * @param $address         The address of the element the history should be shown of.
  *                         The history is reloaded from the element with this address on history.php.
  * @param $sendAsAddHist   If set all (shortened) content of $history is sent via http-url-push.
  *                         Used for answer histories so that they don't have to be recovered on history.php.
  *
  * @return                 The button's html-code.
  */
  static function history ( $history, $address, $sendAsAddHist=false ){
    global $pge, $lng, $url, $cfg;

    if ($url->available( 'hideHistory' )) return ''; // temporarily handy for HTML diffs...

    $history = preg_replace('/^@@([\d]*) (.*)/m',
        '<a href="'.$url->link2( $_SERVER['PHP_SELF'], Array('address' => $url->get('address')) ).'&amp;historicVersion='.$address.'-$1#'.$address.'">$2</a>', $history);
    $history = preg_replace('/^\*\*([\d]*) (.*)/m',
        '<a href="'.$url->link2( $_SERVER['PHP_SELF'], Array('address' => $url->get('address')) ).'&amp;answerVersion='.$address.'-$1#'.$address.'">$2</a>', $history);
    // Shortening for Link (no stylesheet+JavaScript enabled)
    $shrtHistURL = "";
    if ( $sendAsAddHist ){
      if ( strlen($history) > 500 ) // IE doesn't allow links with endless length, so we have to cut
                                    $shrtHistURL = substr( $history, 0, 400 )."...\n...".substr( $history, -100 );
                               else $shrtHistURL = $history;
      $shrtHistURL = urlencode( nl2br( $shrtHistURL ) );
    }

    // shorten History to $cfg->get( 'defHistLns' ) Lines?
    if ( $url->available( 'fullHistory' ) || !$cfg->doesExist( 'limitHistLns2' ) )
        $maxLines = false;
      else
        $maxLines = $cfg->get( 'limitHistLns2' );

    if ( $maxLines ) $historyLines = explode( "\n", $history, $maxLines+1 );
                else $historyLines = explode( "\n", $history );

    $historyText = '';
    if ( $maxLines && (count( $historyLines ) == $maxLines+1) )
         $isLimited = 1; else $isLimited = 0;
    for ( $i=0; $i < count( $historyLines ) - $isLimited; $i++ )
      $historyText .= $historyLines[$i].'<br>'."\n";

    if ( $isLimited )
      $historyText .= '<a href="'.$url->link2(NULL, Array('fullHistory' => $address), $_GET).'#history_'.$address.'">[...]</a>'."\n";

    $historyParams = Array('address' => $address);
    if ($sendAsAddHist) $historyParams['history'] = $shrtHistURL;
    return " <a tabindex=\"".$pge->nextTab++."\" name=\"history_".$address."\" href=\"".
                $url->link2('../pages/history.php', $historyParams).
                "\"".
                " onMouseUp=\"if (document.getElementById('history_".$pge->nextTab."').style.display != 'block') document.getElementById('history_".$pge->nextTab."').style.display = 'block'; else document.getElementById('history_".$pge->nextTab."').style.display = 'none';\" onClick=\"return false;\"".
                ">".
           "<img src=\"../syspix/button_history_13x12.gif\" width=\"13\" height=\"12\" border=\"0\" alt=\"".$lng->get("explainHistory")."\">".
//           "<div>\n".nl2br($history)."\n</div>".
           "</a>".
           "<div id=\"history_".$pge->nextTab."\" class=\"labsys_mop_history\"".( $url->available( 'fullHistory' ) && ($url->get( 'fullHistory' ) == $address) ?  ' style="display: block;"' : '' ).">\n".
// could be added to clode on click on the whole element:        onClick=\"this.style.display = 'none';\"
           '<div style="display: inline; float: right; text-align: center; padding-right: 2px; color: #555555;">'.
//           '&lt;a href="../pages/view.php?address='.$address.'&amp;amp;&#x005F;_LINKQUERY__"&gt;Text&lt;/a&gt;'.
           '<a href="#" onClick="document.getElementById(\'history_'.$pge->nextTab.'\').style.display = \'none\'; return false;">X</a>'.
           '</div>'.
            $historyText.
           "\n</div>"
           ;
  }


  /**
  * This button is used for navigation inside a collection.
  * Link to the next page.
  *
  * @param $address  The link2element's address.
  *
  * @return          The button's html-code.
  */
  static function prev( $address ){
    global $lng, $url, $linkToPreviousPage; // Links are defined in /include/helper.inc
    $link = $url->link2( '../pages/view.php', Array('address' => $address) );
    $linkToPreviousPage = $url->rawLink2( '../pages/view.php', Array('address' => $address));
    return EB::mkLink( $link, "<img src=\"../syspix/button_previous_13x12.gif\" width=\"13\" height=\"12\" border=\"0\" alt=\"previous\" title=\"".$lng->get("explainPrev")."\">" );
  }

  /**
  * This button is used for navigation inside a collection.
  * Link to the previous page.
  *
  * @param $address  The link2element's address.
  *
  * @return          The button's html-code.
  */
  static function next( $address ){
    global $lng, $url, $linkToNextPage; // Links are defined in /include/helper.inc
    $link = $url->link2( '../pages/view.php', Array('address' => $address) );
    $linkToNextPage = $url->rawLink2( '../pages/view.php', Array('address' => $address));
    return EB::mkLink( $link, "<img src=\"../syspix/button_next_13x12.gif\" width=\"13\" height=\"12\" border=\"0\" alt=\"next\" title=\"".$lng->get("explainNext")."\">" );
  }

  /**
  * This button is used for navigation inside a collection.
  * Link to the table of contents.
  *
  * @param $address  The link2element's address.
  *
  * @return          The button's html-code.
  */
  static function toc( $address ){
    global $lng, $url, $linkToTOCPage; // Links are defined in /include/helper.inc
    $link = $url->link2( '../pages/view.php', Array('address' => $address) );
    $linkToTOCPage = $url->rawLink2( '../pages/view.php', Array('address' => $address));
    return EB::mkLink( $link, "<img src=\"../syspix/button_toc_13x12.gif\" width=\"13\" height=\"12\" border=\"0\" alt=\"TOC\" title=\"".$lng->get("explainTOC")."\">" );
  }

  /**
   * This button is used for creating a ticket on the current element.
   *
   * @param $address  The link2element's address.
   *
   * @return          The button's html-code.
   */
  static function ticket( $address ){
  	global $lng, $url, $usr, $cfg; // Links are defined in /include/helper.inc
  	if ( !$usr->isOfKind( IS_USER ) || !$cfg->doesExist('enableTicketLinks') || $cfg->get('enableTicketLinks')!=1 ){
  		return;
  	}
  	$link = $url->link2( '../pages/ticket.php', Array('address' => $address) ).'#subject';
  	return EB::mkLink( $link, "<img src=\"../syspix/button_bug_10x12.gif\" width=\"10\" height=\"12\" border=\"0\" alt=\"ticket\" title=\"".$lng->get("explainTicket")."\">" );
  }

  /**
  * This button is used next to the history button for regular users.
  * It links to the pages/mailForm.php placing a link to the current element into the mail.
  * This button can be used to point someone else to an element, e.g. a teammate "look at this" or a corrector "Could you explain your correction here?"
  *
  * @param $address  The link2element's address.
  * @param $subject  The mail subject
  *
  * @return          The button's html-code.
  */
  static function mail( $address, $subject ){
    global $lng, $url, $usr;
    // Not logged in? -> mailForm is not available -> Button makes no sense
    if ( !$usr->isOfKind( IS_USER ) ){
      return;
    }
    $link = $url->link2( '../pages/mailForm.php', Array('subject' => '[><] '.$subject, 'text' => "\r\n\r\n".'-> http'.( isset($_SERVER['HTTPS']) ? 's' : '').'://'.$_SERVER['SERVER_NAME'].$_SERVER['REQUEST_URI'].'#'.$address.( $usr->isOfKind(IS_CORRECTOR) && $usr->isSeeingSomeonesData() && (strrpos($_SERVER['REQUEST_URI'], 'seeMe')===false)?'&seeMe='.urlencode($usr->theSeeingUid()):'')) );
    return EB::mkLink( $link, "<img src=\"../syspix/button_mail_13x12.gif\" width=\"13\" height=\"12\" border=\"0\" alt=\"mail\" title=\"".$lng->get("explainMailLink2")."\">" );
  }

   static function emojiMenu($fullAddress, $eIDXI){
   $emID = "emBttn". strtolower($eIDXI);
   $eIDX = strtolower($eIDXI);
   global $eDBI, $usr;
   
   if (!$usr->isOfKind( IS_USER )) return;
   
   require_once( "../php/getFirstLastFinal.inc" ); $id = $firstFinal{0};
   $labopen = !($GLOBALS[ $id."DBI" ]->isLabClosed); // add ! closed = true == open = false

   $query1 = $eDBI->findUserSelectionsFor($_SESSION['uid'], $eIDX);
   $selections = $query1->fetch_array();
   $path = "../syspix/button_def.gif";
   $chosen = 0;
      switch($selections[0]){
	case 1:
		$chosen=1;
		break;
	case 2:
                $chosen=2;
		break;
	case 3:
                $chosen=3;
		break;
	case 4:
                $chosen=4;
		break;
	}

   if ($usr->isOfKind( IS_CORRECTOR )) $labopen=false;

   return "<div class=\"emoji-popup\" width=\"13\" height=\"12\">
	<script type=\"text/javascript\">updateEmojiButton( $emID , $chosen);</script>
	  <button id=but".$emID." class=\"emoji-dropbtn4menu\" onmouseenter='updateEmojiMenu(\"" . $eIDX . "\");'><img id=img".$emID." src=".$path." width=\"13\" height=\"12\" ></button>
              <div id=".$emID." class=\"emoji-popupmenu\">".
                EB::likeButton($eIDX,$emID,$labopen).
                EB::dislikeButton($eIDX,$emID,$labopen).
                EB::boredButton($eIDX,$emID,$labopen).
                EB::confusedButton($eIDX,$emID,$labopen)."
        </div>
     </div>
     ";
   }



    /**
     * Functions for EmojiButtons follow. If lab is open render clickable Button when Usr is User. Else render the accumulative results for this button.
     */
    static function likeButton($fullAddress,$emID,$labopen){
        global $pge;
        if ( $labopen )
        {
        return "
                    <button id=but".$emID."like onclick='insertEmojiSelection(\"". $fullAddress ."\", \"". $_SESSION['uid'] ."\", 1);
                        updateEmojiButton($emID , 1); updateEmojiMenu(\"" . $fullAddress . "\");'class=\"emoji-dropbtn\">
                    <img src=\"../syspix/button_like.gif\" width=\"24\" height=\"24\" ><span id=".$emID."like></span></button>
		";
        }else
        {
            return "<div>
                <span id=".$emID."like><img src=\"../syspix/button_like.gif\" width=\"24\" height=\"24\" ></span>
            </div>
            ";
        }
    }

    static function confusedButton($fullAddress,$emID,$labopen){
        global $pge;
        if ( $labopen )
        {
        return "
                    <button id=but".$emID."confused onclick='insertEmojiSelection(\"". $fullAddress ."\", \"". $_SESSION['uid'] ."\", 2);
                        updateEmojiButton($emID , 2); updateEmojiMenu(\"" . $fullAddress . "\");'class=\"emoji-dropbtn\">
                    <img src=\"../syspix/button_frust.gif\" width=\"24\" height=\"24\" ><span id=".$emID."confused></span></button>

            ";
        }else
        {
            return "<div>
                <span id=".$emID."consfused><img src=\"../syspix/button_frust.gif\" width=\"24\" height=\"24\" ></span>
            </div>
            ";
        }
    }

    static function boredButton($fullAddress,$emID,$labopen){
        global $pge;
        if ( $labopen )
        {
        return "
                    <button id=but".$emID."sleep onclick='insertEmojiSelection(\"". $fullAddress ."\", \"". $_SESSION['uid'] ."\", 3);
                        updateEmojiButton($emID , 3); updateEmojiMenu(\"" . $fullAddress . "\");'class=\"emoji-dropbtn\">
                    <img src=\"../syspix/button_sleep.gif\" width=\"24\" height=\"24\" ><span id=".$emID."sleep></span></button>

            ";
        }else
        {
            return "<div>
                <span id=".$emID."sleep><img src=\"../syspix/button_sleep.gif\" width=\"24\" height=\"24\" ></span>
            </div>
            ";
        }
    }

    static function dislikeButton($fullAddress,$emID,$labopen){
        global $pge;
        if ( $labopen )
        {
        return "
                <button id=but".$emID."dislike onclick='insertEmojiSelection(\"". $fullAddress ."\", \"". $_SESSION['uid'] ."\", 4);
                        updateEmojiButton($emID , 4); updateEmojiMenu(\"" . $fullAddress . "\");'class=\"emoji-dropbtn\">
                    <img src=\"../syspix/button_dislike.gif\" width=\"24\" height=\"24\" > <span id=".$emID."dislike></span>
                    </button>
            ";
        }else
        {
            return "<div>
                <span id=".$emID."dislike><img src=\"../syspix/button_dislike.gif\" width=\"24\" height=\"24\" ></span>
            </div>
            ";
        }
    }

}

